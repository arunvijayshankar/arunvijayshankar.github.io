<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-08T20:14:29-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Arktos kai Mennos</title><subtitle>Arun Vijayshankar&apos;s blog</subtitle><entry><title type="html">Password protection in python scripts</title><link href="http://localhost:4000/blog/programming/password-protection-in-python-scripts/" rel="alternate" type="text/html" title="Password protection in python scripts" /><published>2022-03-08T19:50:00-08:00</published><updated>2022-03-08T19:50:00-08:00</updated><id>http://localhost:4000/blog/programming/password-protection-in-python-scripts</id><content type="html" xml:base="http://localhost:4000/blog/programming/password-protection-in-python-scripts/">&lt;p&gt;I came across an interesting problem recently. I was running a python script that would periodically update a remote database. It would connect to the database with a shared login credential and update a table. The script would run locally on multiple machines. Initially, the hashed db password was stored in the script, and extracted before being used to connect to the database.&lt;/p&gt;

&lt;p&gt;It was not too long before I realized that anyone with access to the script can straight up read the password without so much as a how do you do. I looked up password protection on the internet, and there are some good approaches out there, like using hashing with hashlib, storing the password in env values, or using Keyring to store and fetch the password. You can find a good tutorial on using them &lt;a href=&quot;https://martinheinz.dev/blog/59&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, these approaches face the same issue. Anyone with access to the machine the script is running on, can recover the password quite easily. I think only some form of secure handshake/authentication protocol can provide user authentication without storing the password in the script. The problem is, I do not know the first thing about setting up such a system. Especially with a DBMS with which I am unfamiliar. Also, I’m pretty sure the shared login is pretty much an immutable object (pun intended), and I cannot avoid using it. So I thought about it some more, and it occurred to me, that the only reason to keep the password in the script in the first place was because it used a connect_to_db module in the same script to connect to the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/db_conn_mod.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I realized that if I moved the entire connection module to a different file, and imported that file as a library in my script, my script would still have the db connection, but would not need the password in the script in any form. I could then use Keyring in the special connection library to retrieve a password that I store on the system separately, again using Keyring. But this just moves the problem to a different python file. To ensure that the password cannot be extracted from the connection lib file either, I hit upon the idea of compiling the lib file, and including only the byte file along with the main script. And that did it! The script works, and has at least somewhat better security than earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/conn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, this is still not very secure. It is very easy to de-compile the pyc file and extract the password from it. Still, some security is better than no security.&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="programming" /><summary type="html">I came across an interesting problem recently. I was running a python script that would periodically update a remote database. It would connect to the database with a shared login credential and update a table. The script would run locally on multiple machines. Initially, the hashed db password was stored in the script, and extracted before being used to connect to the database.</summary></entry><entry><title type="html">My first “official” programming project</title><link href="http://localhost:4000/blog/programming/my-first-official-programming-project/" rel="alternate" type="text/html" title="My first “official” programming project" /><published>2022-03-06T15:30:05-08:00</published><updated>2022-03-06T15:30:05-08:00</updated><id>http://localhost:4000/blog/programming/my-first-official-programming-project</id><content type="html" xml:base="http://localhost:4000/blog/programming/my-first-official-programming-project/">&lt;p&gt;Today I wrote my first ever code for a work project. Well, technically it’s the second time, but the first time doesn’t count as I was just changing variable names in someone else’s library. First, some background: over the past year, I have been steadily working toward transitioning from software tester to software dev. I decided to go for the self-learning model as it best suited me as a full time employee. I started learning the CS fundamentals of data structures and algorithms, and for actual development, I mostly used python, as it seemed friendly to me. Also because I like snakes (I know, I know, it’s a Monty Python reference, not a herpetological one). I also wrote a few things in C, because I love C. In parallel to theory, I started a project to get some hands on experience. I wanted to work on something I am actually invested in, so I started writing a password management system. I managed to get the backend all squared away, using redis for the backend, and python for middleware. The front end is still in the backlog, as I’ve just started learning frontend development. Interested parties can find it here.&lt;/p&gt;

&lt;p&gt;Working on side projects is a lot of fun, but I really wanted to get my hands dirty by working on an officially sanctioned project at work. As mentioned previously, I am a software tester. Testers do not usually get to write code. But as has been frequently been pointed out to me, there are always opportunities to work on interesting things in my team, for those who ask for it. In the past, I have been reticent to ask for something I wanted to work on, because, “gasp! what if they actually give it to me?? And I can’t do it!? The horror!”. Now, however, I was tired of letting fear hold me back from doing the things I want. I’m tired of standing at the sidelines watching people play. I decided to jump in and ask for a coding project. My manager said he’d see what he could do. A few weeks later, he asked me to think of a way to automate a rather tiresome task my team had been doing manually for the past few months. I came up with an idea and ran it by him, and he pulled in a few more people, and before I knew it, I was adding it as a feature to a bigger project. The project is implemented in python, and it uses a DBMS that I haven’t used before (i.e., anything other than redis), but learning it has been a lot of fun. I wrote two modules today, and after a few hiccups, I got them working!&lt;/p&gt;

&lt;p&gt;There are a few more challenges to overcome before the feature can be pulled in, but I’m quite optimistic about it. If it is implemented in the coming weeks, not only will it be useful to others in my team, but it will be the first feature that I developed!&lt;/p&gt;</content><author><name></name></author><category term="programming" /><category term="programming" /><summary type="html">Today I wrote my first ever code for a work project. Well, technically it’s the second time, but the first time doesn’t count as I was just changing variable names in someone else’s library. First, some background: over the past year, I have been steadily working toward transitioning from software tester to software dev. I decided to go for the self-learning model as it best suited me as a full time employee. I started learning the CS fundamentals of data structures and algorithms, and for actual development, I mostly used python, as it seemed friendly to me. Also because I like snakes (I know, I know, it’s a Monty Python reference, not a herpetological one). I also wrote a few things in C, because I love C. In parallel to theory, I started a project to get some hands on experience. I wanted to work on something I am actually invested in, so I started writing a password management system. I managed to get the backend all squared away, using redis for the backend, and python for middleware. The front end is still in the backlog, as I’ve just started learning frontend development. Interested parties can find it here.</summary></entry></feed>